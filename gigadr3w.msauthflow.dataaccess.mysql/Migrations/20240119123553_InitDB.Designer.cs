// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gigadr3w.msauthflow.dataaccess.mysql.Contexes;

#nullable disable

namespace gigadr3w.msauthflow.dataaccess.mysql.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240119123553_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("gigadr3w.msauthflow.entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("EnabledService")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Read operations from backoffice service",
                            EnabledService = "Backoffice",
                            Name = "BackofficeRead"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Both add and update operations from backoffice service",
                            EnabledService = "Backoffice",
                            Name = "BackofficeWrite"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Delete operations from backoffice service",
                            EnabledService = "Backoffice",
                            Name = "BackofficeDelete"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Read operations from reporting service",
                            EnabledService = "Reporting",
                            Name = "ReportingRead"
                        });
                });

            modelBuilder.Entity("gigadr3w.msauthflow.entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "m.rossi@msauthflow.com",
                            Name = "Mario Rossi",
                            PasswordHash = "73E2512FDFAE0FEB07A60B178F1F8B650D82B75798FE3741E3314BEE8F23227C"
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = 1
                        },
                        new
                        {
                            RolesId = 2,
                            UsersId = 1
                        },
                        new
                        {
                            RolesId = 3,
                            UsersId = 1
                        },
                        new
                        {
                            RolesId = 4,
                            UsersId = 1
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("gigadr3w.msauthflow.entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gigadr3w.msauthflow.entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
